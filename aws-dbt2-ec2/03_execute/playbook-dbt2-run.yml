---
- hosts: dbt2_driver
  name: Run DBT2
  gather_facts: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Load servers.yml
      ansible.builtin.include_vars:
        file: "{{ terraform_project_path }}/terraform/servers.yml"
        name: infra

    - name: Load infrastructure.yml
      ansible.builtin.include_vars:
        file: "../infrastructure.yml"
        name: structure

    - name: Make sure DBT2 target data dir and archive do not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - /tmp/dbt2-data
        - /tmp/dbt2-data.tar.gz

    # Use dbt2_connections as a limit to the number of connections that may be
    # opened, which in units matching the number of processors on the driver
    # system.
    - name: Calculate drivers per processor
      ansible.builtin.set_fact:
        fpp: "{{ ((dbt2_connections | int) / ansible_processor_nproc) | int  }}"

    # Target a 45 minute (2,700,000 ms) rampup time, which is the expected time
    # needed for a 10,000 warehouse database to warm up.
    - name: Start dbt2-run-workload
      ansible.builtin.command:
        cmd: >-
          dbt2-run-workload
            -A
            -a pgsql
            -d {{ dbt2_duration }}
            -D dbt2
            -F {{ fpp }}
            -H {{ infra.servers.machines.postgres1.private_ip }}
            -n
            -o /tmp/dbt2-data
            -s {{ (2700000 / ((fpp | int) * ansible_processor_nproc)) | int }}
            -w {{ dbt2_warehouse }}
            -z "AWS EC2 PostgreSQL {{ structure.aws.machines["postgres1"].instance_type }} | {{ structure.aws.machines["postgres1"].volume.size_gb }} GB {{ structure.aws.machines["postgres1"].volume.type }} | {{ structure.aws.machines["postgres1"].volume.iops }} IOPS | driver {{ structure.aws.machines["dbt2-driver"].instance_type }}"
      environment:
        DRIVER3: "1"
        PGHOST: "{{ infra.servers.machines.postgres1.private_ip }}"
      become: true
      become_user: "{{ pg_owner }}"
      changed_when: false
      register: result

    - name: Workload execution output
      ansible.builtin.debug:
        var: result

    # Ignore errors because dbt2-generate-report needs better return code logic.
    - name: Generate DBT2 report
      ansible.builtin.command:
        cmd: dbt2-generate-report -i /tmp/dbt2-data
      become: true
      become_user: "{{ pg_owner }}"
      changed_when: false
      register: result

    - name: Report generation output
      ansible.builtin.debug:
        var: result

    - name: Create data archive
      ansible.builtin.command:
        cmd: tar cvzf /tmp/dbt2-data.tar.gz /tmp/dbt2-data

    - name: Fetch DBT2 data files
      ansible.builtin.fetch:
        src: "/tmp/dbt2-data.tar.gz"
        dest: "./dbt2_data/dbt2-data.tar.gz"
        flat: true
