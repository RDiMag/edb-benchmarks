---
- hosts: dbt2_driver
  name: Run DBT2
  gather_facts: true

  collections:
    - edb_devops.edb_postgres
  
  vars:
    metric_names:
      - BufferCacheHitRatio
      - CommitLatency
      - CommitThroughput
      - CPUUtilization
      - DatabaseConnections
      - Deadlocks
      - DiskQueueDepth
      - EBSByteBalance%
      - EBSIOBalance%
      - EngineUptime
      - FreeableMemory
      - FreeLocalStorage
      - MaximumUsedTransactionIDs
      - NetworkReceiveThroughput
      - NetworkTransmitThroughput
      - OldestReplicationSlotLag
      - RDSToAuroraPostgreSQLReplicaLag
      - ReadIOPS
      - ReadLatency
      - ReadThroughput
      - ReplicationSlotDiskUsage
      - StorageNetworkReceiveThroughput
      - StorageNetworkThroughput
      - StorageNetworkTransmitThroughput
      - SwapUsage
      - TransactionLogsDiskUsage
      - WriteIOPS
      - WriteLatency
      - WriteThroughput

  tasks:
    
    - name: Load servers.yml
      ansible.builtin.include_vars:
        file: "{{ terraform_project_path }}/servers.yml"
        name: infra

    - name: Load infrastructure.yml
      ansible.builtin.include_vars:
        file: "../infrastructure.yml"
        name: structure

    # DBT-2 driver bug workaround.
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name:
        - bind-utils
      become: true

    - name: Get IP address of DBaaS system
      ansible.builtin.command:
        cmd: >-
          dig
          {% if infra.servers.aurora.dbt2.public_ip %}
            {{ infra.servers.aurora.dbt2.public_ip }}
          {% else %}
            {{ infra.servers.aurora.dbt2.private_ip }}
          {% endif %}
            +short
      register: address

    - name: Make sure DBT2 target data dir and archive do not exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - /tmp/dbt2-data
        - /tmp/dbt2-data.tar.gz

    - name: Display dbt2_connections and ansible_processor_nproc
      ansible.builtin.debug:
        msg:
        - "dbt2_connections: {{ dbt2_connections }}"
        - "ansible_processor_nproc: {{ ansible_processor_nproc }}"

    - name: Calculate drivers per processor
      ansible.builtin.set_fact:
        fpp: "{{ ((dbt2_connections | int) / ansible_processor_nproc) | int  }}"
    
    - name: Get timestamp from the system
      ansible.builtin.shell: "date +%Y-%m-%d-%H:%M:%S"
      register: tstamp
    
    - name: Get start time
      ansible.builtin.set_fact:
        start: "{{ tstamp.stdout }}"

    # Use dbt2_connections as a limit to the number of connections that may be
    # opened, which are opened in units matching the number of processors on
    # the driver system.  Also target a 45 minute (2,700,000 ms) rampup time,
    # which is the expected time needed for a 10,000 warehouse database to warm
    # up.
    - name: Start dbt2-run-workload
      ansible.builtin.command:
        cmd: >-
          dbt2-run-workload
            -A
            -a pgsql
            -d {{ dbt2_duration }}
            -D {{ infra.servers.aurora.dbt2.dbname }}
            -F {{ fpp }}
            -H {{ address.stdout_lines[-1] }}
            -n
            -o /tmp/dbt2-data
            -s {{ (2700000 / ((fpp | int) * ansible_processor_nproc)) | int }}
            -t 1
            -u
            -w {{ dbt2_warehouse }}
            -y
            -z "Aurora PostgreSQL {{ structure.aws.aurora.dbt2.instance_type }} | driver {{ structure.aws.machines["dbt2-driver"].instance_type }} "
      environment:
        DRIVER3: "1"
        PGHOST: "{{ address.stdout_lines[-1] }}"
      become: true
      become_user: "{{ pg_owner }}"
      changed_when: false
      register: result
    
    - name: Gather facts on datetime
      ansible.builtin.setup:
        filter: 
          - "ansible_date_time"
    
    - name: Get timestamp from the system
      ansible.builtin.shell: "date +%Y-%m-%d-%H:%M:%S"
      register: tstamp

    - name: Get end time
      ansible.builtin.set_fact:
        end: "{{ tstamp.stdout }}"

    - name: Workload execution output
      ansible.builtin.debug:
        var: result

    - name: Generate DBT2 report
      ansible.builtin.command:
        cmd: >-
          dbt2-generate-report -i /tmp/dbt2-data
      become: true
      become_user: "{{ pg_owner }}"
      # 04/21/2023 - Commented because was causing the benchmark to fail      
      #async: 180000
      #poll: 60
      changed_when: false
      register: result

    - name: Report generation output
      ansible.builtin.debug:
        var: result

    - name: Create data archive
      ansible.builtin.command:
        cmd: tar cvzf /tmp/dbt2-data.tar.gz /tmp/dbt2-data

    - name: Fetch DBT2 data files
      ansible.builtin.fetch:
        src: "/tmp/dbt2-data.tar.gz"
        dest: "./dbt2_data/dbt2-data.tar.gz"
        flat: true
    
    - name: Get Cloudwatch metrics
      local_action:
        module: ansible.builtin.shell
        cmd: >-
          aws cloudwatch get-metric-statistics --namespace AWS/RDS
          --metric-name {{ item }}
          --start-time {{  start  }}
          --end-time {{ end }}
          --period 60
          --statistics Average
          --dimensions Name=DBInstanceIdentifier,Value={{ infra.servers.aurora.dbt2.resource_id.0 }}
          > {{ item }}.json
      loop:
        "{{ metric_names }}"
      register: result
    
    - name: Convert JSON files to CSV
      local_action:
        module: ansible.builtin.shell
        cmd: >-
          jq -r '.Datapoints[] | [.Timestamp, .Average] | @csv' {{ item }}.json > {{ item }}.csv
      loop:
        "{{ metric_names }}"
      register: result

    - name: Sort CSV
      local_action:
        module: ansible.builtin.shell
        cmd: >-
          sort -o {{ item }}.csv {{ item }}.csv
      loop:
        "{{ metric_names }}"
      register: result
    
    - name: Reformat date for Gnuplot
      local_action:
        module: ansible.builtin.shell
        cmd: >-
          sed -i.bak -e 's/T/,/g' -e 's/:00+00:00//' -e 's/\"//g' -e 's/,/, /g' {{ item }}.csv
      loop:
        "{{ metric_names }}"
      register: result

    - name: Open Gnuplot and create graphs
      local_action:
        module: ansible.builtin.shell
        cmd: >-
          gnuplot -e "set terminal png size 1000,800; set output '{{ item }}.png'; set xlabel 'Time'; set ylabel 'Average'; set timefmt '%Y-%m-%d, %H:%M'; set xdata time; set bmargin 10; set rmargin 10; set format x \"%y/%m/%d\n%H:%M\"; plot '{{ item }}.csv' using 1:3 title '{{ item }}' with linespoints"
      loop:
        "{{ metric_names }}"
      register: result
      